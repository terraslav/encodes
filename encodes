#!/bin/bash
# скрипт перекодирования видеофайлов кодеками hevc(x265) и Opus

# путь к папке с корзиной, если данные находяться на основном разделе то путь будет:
# /home/%user%/.local/share/Trash
# но у меня для медиафайлов имеется отдельный раздел
recycle="/media/media/.Trash-1000"
ext="--no-wrap --info --timeout=5"
err="--title=\"Ошибка\""
tmp="/tmp/tmp.$$"
# для работы скрипта я использую ffmpeg, собранный в такой конфигурации:
if	[ "$(which ffprobe)_" = "_" ] ||
	[ "$(ffprobe -v quiet -version|grep "libx265"|grep "libvorbis")_" = "_" ];then
	zenity --no-wrap --question --title="Неподходящая конфигурация ffmpeg!" \
	--text="В пакете ffmpeg отсутствуют необходимые компоненты.\nСобрать ffmpeg из исходников"
	if [ $? = 0 ]; then
		zenity --text="Процедура скачивания и сборки довольно длительная, придется подождать." \
		--title="Сборка ffmpeg" ${ext} &
		git clone git://source.ffmpeg.org/ffmpeg.git; cd ffmpeg
		./configure --enable-version3 --enable-libtheora --enable-libvorbis --enable-libxvid \
		--enable-ffplay  --enable-libopencore-amrwb --enable-libvo-amrwbenc --enable-gpl --enable-libx264 \
		--enable-libx265 --enable-libmp3lame --enable-nonfree --enable-libfdk-aac
		make
		gksu make install
		cd ..; rm -rf ffmpeg
	else
		zenity --text="Продолжение невозможно!" ${err} ${ext} &
		exit 0
	fi
fi

# запрашиваю путь к папке с медифайлами
if [ -f ~/.lastworkfile ]; then
	work_path="$(cat ~/.lastworkfile)"
else
	work_path="$(pwd)"
fi
work_path=$(zenity --title="Выбор папки" --file-selection --directory --filename="${work_path}")
if [ "${work_path}_" = "_" ]; then
	zenity --text="Не выбрана целевая папка!" ${err} ${ext} &
	exit 0
fi
echo "${work_path}" > ~/.lastworkfile

# Выбор битрейта сжатия
brate=$(zenity --scale --title="Выбор битрейта для кодека hevc" --text="Выбор параметра crf для ffmpeg:\r\r28 Наихудшее качество (минимальный битрейт)\r17 Минимальные потери качества (максимальный битрейт)" --min-value=17 --max-value=28 --step=1 --value=25)
if [ "${brate}_" = "_" ]; then echo "Отмена"; exit 0; fi
echo $brate

# поиск всех видеофайлов в папке с глубиной вложенности до 4 подпапок
find ${work_path} -maxdepth 5 -regextype posix-egrep -regex '.*(AVI|avi|MKV|mkv|MP4|mp4|3GP|3gp|webm|WEBM)$' > /tmp/vlist

# цикл отсева файлов уже конвертированых кодеком hevc
if [ -f /tmp/list ]; then rm /tmp/list; fi
while read i; do
# получаю все кодеки, используемые в демуксере
	ffprobe -i "${i}" -show_streams 2>&1|sed -n 's/.*codec_name=\([a-z,A-Z,0-9,\.]*\).*/\1/p' > /tmp/codecs
	while read codec; do
		if [ "${codec}_" = "hevc_" ]; then
			break
		fi
	done < /tmp/codecs
	rm /tmp/codecs
# и фильтрую hevc
	if [ "${codec}_" = "hevc_" ]; then
		echo "Skipping: ${i}"
		continue
	fi
	if [ "${i}_" = "_" ];then
		break
	fi
# если в файле нет упоминания о hevc добавляю файл в рабочий листинг
	echo "${i}" >> /tmp/list
done < /tmp/vlist
rm /tmp/vlist

# цикл конвертирования
exec 10</tmp/list
while read i <&10; do
# определение количесва потоков в демуксере
	ffprobe -i "${i}" -show_streams 2>&1|grep 'Stream #' > ${tmp}
	a=$(ffprobe -i "${i}" -show_streams 2>&1|grep 'Stream #'|sed -n 's/^.*#\(0:[0-9]\+\).*/\1/p')
	count=$(echo ${a}|wc -w)
	c=0
	line=
# создание карты потоков, дабы ничего не потерять
	while [ ${c} -lt ${count} ]
	do
		line="${line} -map 0:${c}"
		(( c++ ))
	done
# уменшение размера, если требуется
	res=$(cat ${tmp}|grep "Video\|video"|sed 's/.*\( [0-9]\{3,4\}x[0-9]\{2,3\}\).*/\1/;s/^ //')
	width=$(echo ${res}|cut -f1 -d'x')
	height=$(echo ${res}|cut -f2 -d'x')
	if [ ${width} -gt 1280 ];then
# округляю высоту до четного числа
		new_height=$(echo "$height/$width*1280"|bc -l|cut -f1 -d'.')
		new_height=$(echo $(( $new_height % 2 + $new_height)))
		line="${line} -vf scale=1280:${new_height}"
	fi
# получаю путь из полного имени
	lpth=${i%/*}
# создаю новое имя файла, заменив пробелы на символы подчеркивания, удалив ютюбовский номер и маркер
	name=$(echo ${i##*/}|sed 's/ - /-/g;s/^.\///;s/ /_/g;s/~\./\./g;s/-[A-Z,a-z,0-9,-]\{11\}\./\./;s/1080/720/;s/[X,x][V,v][I,i][D,d]/hevc/;s/[X,x]264/hevc/')
	name="${lpth}/${name:0:-4}.mkv"
	name=$(echo ${name}|sed 's/-[A-Z,a-z,0-9,-]\{11\}\./\./')
	if [ "${i: -5:1}" = "~" ]; then
		o="${i}"
# удаляю при необходимости прерванный предыдущим запуском файл
		if [ -f "${name}" ]; then rm "${name}"; fi
	else
		o="${i:0:-4}~.${i: -3:3}"
		mv "${i}" "${o}"
	fi
# создаю и запускаю маленький скрипт с заданными параметрами конвертации
	cat > "/tmp/run" << EOF
#!/bin/bash
nice -n 19 ffmpeg -hide_banner -i "${o}"${line} -c:a opus -strict -2 -c:v libx265 -crf ${brate} -f matroska "${name}"
EOF
	chmod a+x /tmp/run
	/tmp/run
	rm /tmp/run
# сравниваю продолжительность файлов
	dur1=$(ffprobe -v quiet -i "${o}" -show_format|grep duration|cut -f2 -d'='|cut -f1 -d'.')
	dur2=$(ffprobe -v quiet -i "${name}" -show_format|grep duration|cut -f2 -d'='|cut -f1 -d'.')
	if [ "${dur2}_" = "_" ]; then
		echo "Skipping: ${i##*/}"
		continue
	fi
	delta=$(( ${dur1} - ${dur2} ))
# если продолжительность отличается менее, чем на 5 секунд, перемещаю исходник в корзину
	if [ $delta -lt 5 ]; then
		if [ "$(which gio)_" = "_" ];then
			mv "${o}" "${recycle}/files/${i##*/}"
			a="$(echo ${i}|sed 's/ /%20/g')"
			echo -e "[Trash Info]\nPath=${a}\nDeletionDate=$(date +%FT%T)" >\
					"${recycle}/info/${i##*/}.trashinfo"
		else
			gio trash "${o}"
		fi
	fi
done
if [ -f ${tmp} ]; then rm ${tmp}; fi
rm /tmp/list
